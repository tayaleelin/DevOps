name: Deploy AKS-Construction

on: [push]

permissions:
  id-token: write
  contents: read

jobs:
  # deploy_resource_group:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@master
  #     - uses: azure/login@v1
  #       with:
  #         client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  #         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #     - id: create_resource_group
  #       uses: Azure/CLI@v1
  #       with:
  #         inlineScript: |
  #           #!/bin/bash
  #           resourceGroup="k8s-ldplay-rg"
  #           az group create --name ${{ secrets.AZURE_RESOURCE_GROUP }} --location ${{ secrets.AZURE_LOCATION }}
  #           az role assignment create --role owner --assignee-object-id  ${{ secrets.USER_OBJECT_ID }} --assignee-principal-type ServicePrincipal --scope /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.AZURE_RESOURCE_GROUP }}
  #           echo "Azure resource group created"
  deploy_aks_construction:
    # needs: deploy_resource_group
    uses: Azure/AKS-Construction/.github/workflows/AKSC_Deploy.yml@0.10.0
    with:
      templateVersion: 0.10.0
      rg: jobs.deploy_resource_group.outputs.resourceGroup
      resourceName: k8s-ldplay
      templateParams: resourceName=k8s-ldplay agentCount=1 JustUseSystemPool=true osDiskType=Managed osDiskSizeGB=32 enableTelemetry=false automationAccountScheduledStartStop=Weekday
      postScriptParams: "ingress=contour,monitor=oss"
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      USER_OBJECT_ID: ${{ secrets.USER_OBJECT_ID }}
  # deploy_flux_configuration:
  #   runs-on: ubuntu-latest
  #   needs: deploy_aks_construction
  #   steps:
  #     - name: Enable extensions
  #       uses: Azure/CLI@v1
  #       with:
  #         inlineScript: |
  #           #!/bin/bash
  #           aksExtensionManager=$(az feature show --namespace Microsoft.ContainerService --name AKS-ExtensionManager --query "properties.state" -o tsv)
  #           if [ "$aksExtensionManager" == "Registered" ]
  #           then
  #             echo "AKS-ExtensionManager already registered"
  #           else
  #             az feature register --namespace Microsoft.ContainerService --name AKS-ExtensionManager
  #             echo "AKS-ExtensionManager registered"
  #             # sleep and check if extension is registered
  #             sleep 30
  #             aksExtensionManager=$(az feature show --namespace Microsoft.ContainerService --name AKS-ExtensionManager --query "properties.state" -o tsv)
  #             if [ "$aksExtensionManager" == "Registered" ]
  #             then
  #               echo "AKS-ExtensionManager registered"
  #             else
  #               echo "AKS-ExtensionManager not registered"
  #               exit 1
  #             fi
  #           fi
  #     - name: Deploy Flux configuration
  #       uses: Azure/CLI@v1
  #       with:
  #         inlineScript: |
  #           #!/bin/bash
  #           templatefile="./flux/modules/Microsoft.KubernetesConfiguration/fluxConfigurations/deploy.bicep"
  #           az deployment group create --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --template-file $templateFile --parameters ./flux/azuredeploy.parameters.json
  #           echo "Flux configuration deployed"
